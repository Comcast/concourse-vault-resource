// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/comcast/concourse-vault-resource/pkg/resource"
	"github.com/comcast/concourse-vault-resource/pkg/resource/models"
)

type FakeVault struct {
	CheckStub        func() []models.Version
	checkMutex       sync.RWMutex
	checkArgsForCall []struct {
	}
	checkReturns struct {
		result1 []models.Version
	}
	checkReturnsOnCall map[int]struct {
		result1 []models.Version
	}
	InStub        func() error
	inMutex       sync.RWMutex
	inArgsForCall []struct {
	}
	inReturns struct {
		result1 error
	}
	inReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVault) Check() []models.Version {
	fake.checkMutex.Lock()
	ret, specificReturn := fake.checkReturnsOnCall[len(fake.checkArgsForCall)]
	fake.checkArgsForCall = append(fake.checkArgsForCall, struct {
	}{})
	fake.recordInvocation("Check", []interface{}{})
	fake.checkMutex.Unlock()
	if fake.CheckStub != nil {
		return fake.CheckStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkReturns
	return fakeReturns.result1
}

func (fake *FakeVault) CheckCallCount() int {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return len(fake.checkArgsForCall)
}

func (fake *FakeVault) CheckCalls(stub func() []models.Version) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = stub
}

func (fake *FakeVault) CheckReturns(result1 []models.Version) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	fake.checkReturns = struct {
		result1 []models.Version
	}{result1}
}

func (fake *FakeVault) CheckReturnsOnCall(i int, result1 []models.Version) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	if fake.checkReturnsOnCall == nil {
		fake.checkReturnsOnCall = make(map[int]struct {
			result1 []models.Version
		})
	}
	fake.checkReturnsOnCall[i] = struct {
		result1 []models.Version
	}{result1}
}

func (fake *FakeVault) In() error {
	fake.inMutex.Lock()
	ret, specificReturn := fake.inReturnsOnCall[len(fake.inArgsForCall)]
	fake.inArgsForCall = append(fake.inArgsForCall, struct {
	}{})
	fake.recordInvocation("In", []interface{}{})
	fake.inMutex.Unlock()
	if fake.InStub != nil {
		return fake.InStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.inReturns
	return fakeReturns.result1
}

func (fake *FakeVault) InCallCount() int {
	fake.inMutex.RLock()
	defer fake.inMutex.RUnlock()
	return len(fake.inArgsForCall)
}

func (fake *FakeVault) InCalls(stub func() error) {
	fake.inMutex.Lock()
	defer fake.inMutex.Unlock()
	fake.InStub = stub
}

func (fake *FakeVault) InReturns(result1 error) {
	fake.inMutex.Lock()
	defer fake.inMutex.Unlock()
	fake.InStub = nil
	fake.inReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVault) InReturnsOnCall(i int, result1 error) {
	fake.inMutex.Lock()
	defer fake.inMutex.Unlock()
	fake.InStub = nil
	if fake.inReturnsOnCall == nil {
		fake.inReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.inReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVault) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	fake.inMutex.RLock()
	defer fake.inMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVault) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.Vault = new(FakeVault)
